{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bramw\\\\OneDrive\\\\Documents\\\\GitHub\\\\info340\\\\lecture-demos\\\\react-chat-2\\\\src\\\\components\\\\ChatPane.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// import React from 'react';\n\n// import CHAT_HISTORY from '../data/chat_log.json';\n\n// export function ChatPane(props) {\n//   const currentChannel = props.currentChannel;\n\n//   const handleClick = (event) => {\n//     console.log(\"you clicked me!\");\n//   }\n\n//only show current channel messages and sort by reverse chron order\n// const channelMessage = CHAT_HISTORY.filter((msgObj) => {\n//   return msgObj.channel === currentChannel;\n// }).sort((m1,m2) => m2.timestamp - m1.timestamp)\n\n// const messageItemArray = channelMessage.map((messageObj) => {\n//   const element = (\n//     <MessageItem\n//       messageData={messageObj}\n//       key={messageObj.timestamp}\n//     />\n//   )\n//   return element;\n// })\n\n// // // original\n// return (\n//   <div className=\"scrollable-pane\">\n//     <div className=\"pt-2 my-2\">\n//       {/* testing button */}\n//       <button className=\"btn btn-outline-primary mb-3\" onClick={handleClick}>\n//         Click me!\n//       </button>\n//       <hr/>\n\n//       {/* messages */}\n//       {messageItemArray}\n//     </div>\n//   </div>\n//   )\n// }\n\n//   // Slide 13 - show the button if 'general' is the current channel\n//   return (\n//     <div className=\"scrollable-pane\">\n//       <div className=\"pt-2 my-2\">\n//         {/* testing button */}\n//         {currentChannel === 'general' &&\n//           <div>\n//             <button className=\"btn btn-outline-primary mb-3\" onClick={handleClick}>\n//               Click me!\n//             </button>\n//             <hr />\n//           </div>}\n//         {/* messages */}\n//         {messageItemArray}\n//       </div>\n//     </div>\n//   )\n\n// }\n\n// function MessageItem(props) {\n//   const { userName, userImg, text } = props.messageData;\n//   // const userName = props.messageData.userName;\n//   // const userImg = props.messageData.userImg;\n\n//   const handleClick = (event) => {\n//     console.log(\"you liked \" + userName + \"'s post!\");\n//   }\n\n//   return (\n//     <div className=\"message d-flex mb-3\">\n//       <div className=\"me-2\">\n//         <img src={userImg} alt={userName + \"'s avatar\"} />\n//       </div>\n//       <div className=\"flex-grow-1\">\n//         <p className=\"user-name\">{userName}</p>\n//         <p>{text}</p>\n//         <button className=\"btn like-button\" onClick={handleClick}>\n//           <span className=\"material-icons\" style={{ color: \"grey\" }}>favorite_border</span>\n//         </button>\n//       </div>\n//     </div>\n//   )\n// }\n\n// // Slide 14 and 16 - conditional rendering and initial event handling\n// import React from 'react';\n\n// import CHAT_HISTORY from '../data/chat_log.json';\n\n// export function ChatPane(props) {\n//   const currentChannel = props.currentChannel;\n\n//   //(trying to update count on button)\n//   let currentCount = 0;\n//   const handleClick = (event) => {\n//     currentCount = currentCount + 1;\n//     console.log(\"you clicked me!\", currentCount);\n\n//   }\n\n//   //only show current channel messages\n//   const channelMessages = CHAT_HISTORY.filter((msgObj) => {\n//     return msgObj.channel === currentChannel;\n//   })\n\n//   //IF THERE ARE NO MESSAGES IN THIS CHANNEL, SHOW THIS\n//   if (channelMessages.length === 0) {\n//     return <p>No Chat Messages Yet</p>\n//     // return null;\n//   }\n\n//   //  OTHERWISE, map the messages & return.\n//   const messageItemArray = channelMessages.map((messageObj) => {\n//     const element = (\n//       <MessageItem\n//         messageData={messageObj}\n//         key={messageObj.timestamp}\n//       />\n//     )\n//     return element;\n//   })\n\n//   return (\n//     <div className=\"scrollable-pane\">\n//       <div className=\"pt-2 my-2\">\n//         {/* testing button */}\n//         {currentChannel === 'general' &&\n//           <div>\n//             <button className=\"btn btn-outline-primary mb-3\" onClick={handleClick}>\n//               Click me: {currentCount}\n//             </button>\n//             <hr />\n//           </div>}\n//         {/* messages */}\n//         {messageItemArray}\n//       </div>\n//     </div>\n//   )\n// }\n\n// function MessageItem(props) {\n//   const { userName, userImg, text } = props.messageData;\n//   // const userName = props.messageData.userName;\n//   // const userImg = props.messageData.userImg;\n\n//   const handleClick = (event) => {\n//     console.log(\"you liked \" + userName + \"'s post!\");\n//   }\n\n//   return (\n//     <div className=\"message d-flex mb-3\">\n//       <div className=\"me-2\">\n//         <img src={userImg} alt={userName + \"'s avatar\"} />\n//       </div>\n//       <div className=\"flex-grow-1\">\n//         <p className=\"user-name\">{userName}</p>\n//         <p>{text}</p>\n//         <button className=\"btn like-button\" onClick={handleClick}>\n//           <span className=\"material-icons\" style={{ color: \"grey\" }}>favorite_border</span>\n//         </button>\n//       </div>\n//     </div>\n//   )\n// }\n\n// // Slide 21 and 22 - Using State Hooks\nimport React, { useState } from 'react';\nimport CHAT_HISTORY from '../data/chat_log.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ChatPane(props) {\n  _s();\n  // const stateManagementArray = useState(0); //start out at 0 very first time\n  // const count = stateManagementArray[0];\n  // const setCount = stateManagementArray[1];\n  // console.log(\"stateManagementArray: \", stateManagementArray)\n\n  // //instead destructure\n  const [count, setCount] = useState(0);\n  const currentChannel = props.currentChannel;\n  const handleClick = event => {\n    setCount(count + 1);\n    console.log(\"you clicked me!\", count);\n  };\n\n  //only show current channel messages\n  const channelMessages = CHAT_HISTORY.filter(msgObj => {\n    return msgObj.channel === currentChannel;\n  });\n\n  //IF THERE ARE NO MESSAGES IN THIS CHANNEL, SHOW THIS\n  if (channelMessages.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Messages Yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 12\n    }, this);\n  }\n  const messageItemArray = channelMessages.map(messageObj => {\n    const element = /*#__PURE__*/_jsxDEV(MessageItem, {\n      messageData: messageObj\n    }, messageObj.timestamp, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this);\n    return element;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scrollable-pane\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pt-2 my-2\",\n      children: [currentChannel === 'general' && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-primary mb-3\",\n          onClick: handleClick,\n          children: [\"Click me: \", count]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this), messageItemArray, /*#__PURE__*/_jsxDEV(TodoListWithError, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatPane, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n_c = ChatPane;\nfunction MessageItem(props) {\n  _s2();\n  const {\n    userName,\n    userImg,\n    text\n  } = props.messageData;\n  const [isLiked, setIsLiked] = useState(false);\n  const handleClick = event => {\n    console.log(\"you liked \" + userName + \"'s post!\");\n    setIsLiked(!isLiked);\n  };\n  let heartColor = 'grey';\n  if (isLiked) {\n    heartColor = 'red';\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message d-flex mb-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"me-2\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: userImg,\n        alt: userName + \"'s avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow-1\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"user-name\",\n        children: userName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn like-button\",\n        onClick: handleClick,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"material-icons\",\n          style: {\n            color: heartColor\n          },\n          children: \"favorite_border\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 5\n  }, this);\n}\n\n// function TodoListWithError(props) {\n//   //a state value that is an array of objects\n//   const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n\n//   const handleClick = (event) => {\n//     console.log(\"you clicked me\");\n//     todos[0].text = \"Fix bugs\"; //modify the object\n//                                 //but don't make a new one\n//     setTodos(todos) //This won't work! Not \"changing\"\n//   }\n//    console.log(todos);\n\n//   return (\n//     // {todos[0].text}\n//     <p onClick={handleClick}>{todos[0].text}</p>\n//   )\n// }\n_s2(MessageItem, \"eHCM9bKEgGkXltnJZ+5NUCvkPlo=\");\n_c2 = MessageItem;\nfunction TodoListWithError(props) {\n  _s3();\n  //a state value that is an array of objects\n  const [todos, setTodos] = useState([{\n    text: 'Learn Hooks'\n  }]);\n  const handleClick = event => {\n    todos[0].text = \"Fix bugs\"; //modify the object\n    //but don't make a new one\n\n    const newTodosArray = [...todos];\n    // setTodos(todos) //This won't work! Not \"changing\"\n    setTodos(newTodosArray); //setting a copy will work\n  };\n\n  console.log(todos);\n  return (\n    /*#__PURE__*/\n    // {todos[0].text}\n    _jsxDEV(\"p\", {\n      onClick: handleClick,\n      children: todos[0].text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n// //Slide 35 (36 and 37) to elevate state to App\n// import React, {useState} from 'react';\n\n// export function ChatPane(props) {\n// // const [chatMessages, setChatMessages] = useState(CHAT_HISTORY);\n//   const currentChannel = props.currentChannel;\n\n//   //only show current channel messages\n//   const channelMessages = props.chatMessages.filter((msgObj) => {\n//     return msgObj.channel === currentChannel;\n//   })\n\n//   const messageItemArray = channelMessages.map((messageObj) => {\n//     const element = (\n//       <MessageItem\n//         messageData={messageObj}\n//         key={messageObj.timestamp}\n//       />\n//     )\n//     return element;\n//   })\n\n// const [count, setCount] = useState(0);\n\n// console.log('calling chatpane')\n\n// const handleClick = (event) => {\n//   console.log(\"you clicked me!\");\n//     setCount(count+1);\n//     console.log(count);\n//     // addMessage(\"Click\");\n// }\n\n// if (channelMessages.length === 0) {\n//   return <p>No Messages Yet</p>\n// }\n\n// return (\n//   <div className=\"scrollable-pane\">\n//     <div className=\"pt-2 my-2\">\n//       {/* testing button */}\n//       <button className=\"btn btn-outline-primary mb-3\" onClick={handleClick}>\n//         Click me: {count}\n//       </button>\n//       <hr />\n\n//       {messageItemArray}\n//     </div>\n//   </div>\n// )\n\n// }\n\n// function MessageItem(props) {\n// const { userName, userImg, text } = props.messageData;\n\n// const [isLiked, setIsLiked ] = useState(false);\n\n// const handleClick = (event) => {\n//   setIsLiked(!isLiked);\n//   console.log(\"you liked \" + userName + \"'s post!\");\n// }\n\n// let heartColor = 'grey';\n// if (isLiked){\n//   heartColor = 'red';\n// }\n\n// return (\n//   <div className=\"message d-flex mb-3\">\n//     <div className=\"me-2\">\n//       <img src={userImg} alt={userName + \"'s avatar\"} />\n//     </div>\n//     <div className=\"flex-grow-1\">\n//       <p className=\"user-name\">{userName}</p>\n//       <p>{text}</p>\n//       <button className=\"btn like-button\" onClick={handleClick}>\n//         <span className=\"material-icons\" style={{ color: heartColor }}>favorite_border</span>\n//       </button>\n//     </div>\n//   </div>\n// )\n// }\n\n// //Post Lecture, add the Channel navigation (elevate state, etc)\n\n// import React, {useState} from 'react';\n\n// export function ChatPane(props) {\n// // const [chatMessages, setChatMessages] = useState(CHAT_HISTORY);\n//   const currentChannel = props.currentChannel;\n\n//   //only show current channel messages\n//   const channelMessages = props.chatMessages.filter((msgObj) => {\n//     return msgObj.channel === currentChannel;\n//   })\n\n//   const messageItemArray = channelMessages.map((messageObj) => {\n//     const element = (\n//       <MessageItem\n//         messageData={messageObj}\n//         key={messageObj.timestamp}\n//       />\n//     )\n//     return element;\n//   })\n\n// const [count, setCount] = useState(0);\n\n// console.log('calling chatpane')\n\n// const handleClick = (event) => {\n//   console.log(\"you clicked me!\");\n//     setCount(count+1);\n//     console.log(count);\n//     // addMessage(\"Click\");\n// }\n\n// if (channelMessages.length === 0) {\n//   return <p>No Messages Yet</p>\n// }\n\n// return (\n//   <div className=\"scrollable-pane\">\n//     <div className=\"pt-2 my-2\">\n//       {/* testing button */}\n//       <button className=\"btn btn-outline-primary mb-3\" onClick={handleClick}>\n//         Click me: {count}\n//       </button>\n//       <hr />\n\n//       {messageItemArray}\n//     </div>\n//   </div>\n// )\n\n// }\n\n// function MessageItem(props) {\n// const { userName, userImg, text } = props.messageData;\n\n// const [isLiked, setIsLiked ] = useState(false);\n\n// const handleClick = (event) => {\n//   setIsLiked(!isLiked);\n//   console.log(\"you liked \" + userName + \"'s post!\");\n// }\n\n// let heartColor = 'grey';\n// if (isLiked){\n//   heartColor = 'red';\n// }\n\n// return (\n//   <div className=\"message d-flex mb-3\">\n//     <div className=\"me-2\">\n//       <img src={userImg} alt={userName + \"'s avatar\"} />\n//     </div>\n//     <div className=\"flex-grow-1\">\n//       <p className=\"user-name\">{userName}</p>\n//       <p>{text}</p>\n//       <button className=\"btn like-button\" onClick={handleClick}>\n//         <span className=\"material-icons\" style={{ color: heartColor }}>favorite_border</span>\n//       </button>\n//     </div>\n//   </div>\n// )\n// }\n_s3(TodoListWithError, \"K4wCCDAClwcstrvh1mcPbRtqcxM=\");\n_c3 = TodoListWithError;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ChatPane\");\n$RefreshReg$(_c2, \"MessageItem\");\n$RefreshReg$(_c3, \"TodoListWithError\");","map":{"version":3,"names":["React","useState","CHAT_HISTORY","jsxDEV","_jsxDEV","ChatPane","props","_s","count","setCount","currentChannel","handleClick","event","console","log","channelMessages","filter","msgObj","channel","length","children","fileName","_jsxFileName","lineNumber","columnNumber","messageItemArray","map","messageObj","element","MessageItem","messageData","timestamp","className","onClick","TodoListWithError","_c","_s2","userName","userImg","text","isLiked","setIsLiked","heartColor","src","alt","style","color","_c2","_s3","todos","setTodos","newTodosArray","_c3","$RefreshReg$"],"sources":["C:/Users/bramw/OneDrive/Documents/GitHub/info340/lecture-demos/react-chat-2/src/components/ChatPane.js"],"sourcesContent":["// import React from 'react';\r\n\r\n// import CHAT_HISTORY from '../data/chat_log.json';\r\n\r\n// export function ChatPane(props) {\r\n//   const currentChannel = props.currentChannel;\r\n\r\n//   const handleClick = (event) => {\r\n//     console.log(\"you clicked me!\");\r\n//   }\r\n\r\n  //only show current channel messages and sort by reverse chron order\r\n  // const channelMessage = CHAT_HISTORY.filter((msgObj) => {\r\n  //   return msgObj.channel === currentChannel;\r\n  // }).sort((m1,m2) => m2.timestamp - m1.timestamp)\r\n\r\n\r\n  // const messageItemArray = channelMessage.map((messageObj) => {\r\n  //   const element = (\r\n  //     <MessageItem\r\n  //       messageData={messageObj}\r\n  //       key={messageObj.timestamp}\r\n  //     />\r\n  //   )\r\n  //   return element;\r\n  // })\r\n\r\n\r\n  // // // original\r\n  // return (\r\n  //   <div className=\"scrollable-pane\">\r\n  //     <div className=\"pt-2 my-2\">\r\n  //       {/* testing button */}\r\n  //       <button className=\"btn btn-outline-primary mb-3\" onClick={handleClick}>\r\n  //         Click me!\r\n  //       </button>\r\n  //       <hr/>\r\n\r\n  //       {/* messages */}\r\n  //       {messageItemArray}\r\n  //     </div>\r\n  //   </div>\r\n  //   )\r\n  // }\r\n\r\n//   // Slide 13 - show the button if 'general' is the current channel\r\n//   return (\r\n//     <div className=\"scrollable-pane\">\r\n//       <div className=\"pt-2 my-2\">\r\n//         {/* testing button */}\r\n//         {currentChannel === 'general' &&\r\n//           <div>\r\n//             <button className=\"btn btn-outline-primary mb-3\" onClick={handleClick}>\r\n//               Click me!\r\n//             </button>\r\n//             <hr />\r\n//           </div>}\r\n//         {/* messages */}\r\n//         {messageItemArray}\r\n//       </div>\r\n//     </div>\r\n//   )\r\n\r\n// }\r\n\r\n// function MessageItem(props) {\r\n//   const { userName, userImg, text } = props.messageData;\r\n//   // const userName = props.messageData.userName;\r\n//   // const userImg = props.messageData.userImg;\r\n\r\n//   const handleClick = (event) => {\r\n//     console.log(\"you liked \" + userName + \"'s post!\");\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"message d-flex mb-3\">\r\n//       <div className=\"me-2\">\r\n//         <img src={userImg} alt={userName + \"'s avatar\"} />\r\n//       </div>\r\n//       <div className=\"flex-grow-1\">\r\n//         <p className=\"user-name\">{userName}</p>\r\n//         <p>{text}</p>\r\n//         <button className=\"btn like-button\" onClick={handleClick}>\r\n//           <span className=\"material-icons\" style={{ color: \"grey\" }}>favorite_border</span>\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n\r\n// // Slide 14 and 16 - conditional rendering and initial event handling\r\n// import React from 'react';\r\n\r\n// import CHAT_HISTORY from '../data/chat_log.json';\r\n\r\n// export function ChatPane(props) {\r\n//   const currentChannel = props.currentChannel;\r\n\r\n//   //(trying to update count on button)\r\n//   let currentCount = 0;\r\n//   const handleClick = (event) => {\r\n//     currentCount = currentCount + 1;\r\n//     console.log(\"you clicked me!\", currentCount);\r\n\r\n//   }\r\n\r\n//   //only show current channel messages\r\n//   const channelMessages = CHAT_HISTORY.filter((msgObj) => {\r\n//     return msgObj.channel === currentChannel;\r\n//   })\r\n\r\n//   //IF THERE ARE NO MESSAGES IN THIS CHANNEL, SHOW THIS\r\n//   if (channelMessages.length === 0) {\r\n//     return <p>No Chat Messages Yet</p>\r\n//     // return null;\r\n//   }\r\n\r\n//   //  OTHERWISE, map the messages & return.\r\n//   const messageItemArray = channelMessages.map((messageObj) => {\r\n//     const element = (\r\n//       <MessageItem\r\n//         messageData={messageObj}\r\n//         key={messageObj.timestamp}\r\n//       />\r\n//     )\r\n//     return element;\r\n//   })\r\n\r\n//   return (\r\n//     <div className=\"scrollable-pane\">\r\n//       <div className=\"pt-2 my-2\">\r\n//         {/* testing button */}\r\n//         {currentChannel === 'general' &&\r\n//           <div>\r\n//             <button className=\"btn btn-outline-primary mb-3\" onClick={handleClick}>\r\n//               Click me: {currentCount}\r\n//             </button>\r\n//             <hr />\r\n//           </div>}\r\n//         {/* messages */}\r\n//         {messageItemArray}\r\n//       </div>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n// function MessageItem(props) {\r\n//   const { userName, userImg, text } = props.messageData;\r\n//   // const userName = props.messageData.userName;\r\n//   // const userImg = props.messageData.userImg;\r\n\r\n//   const handleClick = (event) => {\r\n//     console.log(\"you liked \" + userName + \"'s post!\");\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"message d-flex mb-3\">\r\n//       <div className=\"me-2\">\r\n//         <img src={userImg} alt={userName + \"'s avatar\"} />\r\n//       </div>\r\n//       <div className=\"flex-grow-1\">\r\n//         <p className=\"user-name\">{userName}</p>\r\n//         <p>{text}</p>\r\n//         <button className=\"btn like-button\" onClick={handleClick}>\r\n//           <span className=\"material-icons\" style={{ color: \"grey\" }}>favorite_border</span>\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n// // Slide 21 and 22 - Using State Hooks\r\nimport React, { useState } from 'react';\r\nimport CHAT_HISTORY from '../data/chat_log.json';\r\n\r\nexport function ChatPane(props) {\r\n\r\n  // const stateManagementArray = useState(0); //start out at 0 very first time\r\n  // const count = stateManagementArray[0];\r\n  // const setCount = stateManagementArray[1];\r\n  // console.log(\"stateManagementArray: \", stateManagementArray)\r\n\r\n  // //instead destructure\r\n  const [count, setCount] = useState(0);\r\n\r\n\r\n  const currentChannel = props.currentChannel;\r\n\r\n\r\n  const handleClick = (event) => {\r\n    setCount(count + 1);\r\n    console.log(\"you clicked me!\", count);\r\n  }\r\n\r\n  //only show current channel messages\r\n  const channelMessages = CHAT_HISTORY.filter((msgObj) => {\r\n    return msgObj.channel === currentChannel;\r\n  })\r\n\r\n  //IF THERE ARE NO MESSAGES IN THIS CHANNEL, SHOW THIS\r\n  if (channelMessages.length === 0) {\r\n    return <p>No Messages Yet</p>\r\n  }\r\n  const messageItemArray = channelMessages.map((messageObj) => {\r\n    const element = (\r\n      <MessageItem\r\n        messageData={messageObj}\r\n        key={messageObj.timestamp}\r\n      />\r\n    )\r\n    return element;\r\n  })\r\n\r\n  return (\r\n    <div className=\"scrollable-pane\">\r\n      <div className=\"pt-2 my-2\">\r\n        {/* testing button */}\r\n        {currentChannel === 'general' &&\r\n          <div>\r\n            <button className=\"btn btn-outline-primary mb-3\" onClick={handleClick}>\r\n              Click me: {count}\r\n            </button>\r\n            <hr />\r\n          </div>}\r\n        {/* messages */}\r\n        {messageItemArray}\r\n        <TodoListWithError/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction MessageItem(props) {\r\n  const { userName, userImg, text } = props.messageData;\r\n  const [isLiked, setIsLiked] = useState(false);\r\n\r\n  const handleClick = (event) => {\r\n    console.log(\"you liked \" + userName + \"'s post!\");\r\n    setIsLiked(!isLiked);\r\n  }\r\n\r\n  let heartColor = 'grey';\r\n  if (isLiked) {\r\n    heartColor = 'red';\r\n  }\r\n  return (\r\n    <div className=\"message d-flex mb-3\">\r\n      <div className=\"me-2\">\r\n        <img src={userImg} alt={userName + \"'s avatar\"} />\r\n      </div>\r\n      <div className=\"flex-grow-1\">\r\n        <p className=\"user-name\">{userName}</p>\r\n        <p>{text}</p>\r\n        <button className=\"btn like-button\" onClick={handleClick}>\r\n          <span className=\"material-icons\" style={{ color: heartColor }}>favorite_border</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// function TodoListWithError(props) {\r\n//   //a state value that is an array of objects\r\n//   const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\r\n\r\n//   const handleClick = (event) => {\r\n//     console.log(\"you clicked me\");\r\n//     todos[0].text = \"Fix bugs\"; //modify the object\r\n//                                 //but don't make a new one\r\n//     setTodos(todos) //This won't work! Not \"changing\"\r\n//   }\r\n//    console.log(todos);\r\n\r\n//   return (\r\n//     // {todos[0].text}\r\n//     <p onClick={handleClick}>{todos[0].text}</p>\r\n//   )\r\n// }\r\n\r\nfunction TodoListWithError(props) {\r\n  //a state value that is an array of objects\r\n  const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\r\n\r\n  const handleClick = (event) => {\r\n        todos[0].text = \"Fix bugs\"; //modify the object\r\n                                //but don't make a new one\r\n\r\n    const newTodosArray = [...todos];\r\n    // setTodos(todos) //This won't work! Not \"changing\"\r\n    setTodos(newTodosArray) //setting a copy will work\r\n  }\r\n   console.log(todos);\r\n\r\n  return (\r\n    // {todos[0].text}\r\n    <p onClick={handleClick}>{todos[0].text}</p>\r\n  )\r\n}\r\n\r\n// //Slide 35 (36 and 37) to elevate state to App\r\n// import React, {useState} from 'react';\r\n\r\n// export function ChatPane(props) {\r\n// // const [chatMessages, setChatMessages] = useState(CHAT_HISTORY);\r\n//   const currentChannel = props.currentChannel;\r\n\r\n//   //only show current channel messages\r\n//   const channelMessages = props.chatMessages.filter((msgObj) => {\r\n//     return msgObj.channel === currentChannel;\r\n//   })\r\n\r\n//   const messageItemArray = channelMessages.map((messageObj) => {\r\n//     const element = (\r\n//       <MessageItem\r\n//         messageData={messageObj}\r\n//         key={messageObj.timestamp}\r\n//       />\r\n//     )\r\n//     return element;\r\n//   })\r\n\r\n// const [count, setCount] = useState(0);\r\n\r\n// console.log('calling chatpane')\r\n\r\n// const handleClick = (event) => {\r\n//   console.log(\"you clicked me!\");\r\n//     setCount(count+1);\r\n//     console.log(count);\r\n//     // addMessage(\"Click\");\r\n// }\r\n\r\n\r\n// if (channelMessages.length === 0) {\r\n//   return <p>No Messages Yet</p>\r\n// }\r\n\r\n// return (\r\n//   <div className=\"scrollable-pane\">\r\n//     <div className=\"pt-2 my-2\">\r\n//       {/* testing button */}\r\n//       <button className=\"btn btn-outline-primary mb-3\" onClick={handleClick}>\r\n//         Click me: {count}\r\n//       </button>\r\n//       <hr />\r\n\r\n//       {messageItemArray}\r\n//     </div>\r\n//   </div>\r\n// )\r\n\r\n// }\r\n\r\n// function MessageItem(props) {\r\n// const { userName, userImg, text } = props.messageData;\r\n\r\n// const [isLiked, setIsLiked ] = useState(false);\r\n\r\n// const handleClick = (event) => {\r\n//   setIsLiked(!isLiked);\r\n//   console.log(\"you liked \" + userName + \"'s post!\");\r\n// }\r\n\r\n// let heartColor = 'grey';\r\n// if (isLiked){\r\n//   heartColor = 'red';\r\n// }\r\n\r\n// return (\r\n//   <div className=\"message d-flex mb-3\">\r\n//     <div className=\"me-2\">\r\n//       <img src={userImg} alt={userName + \"'s avatar\"} />\r\n//     </div>\r\n//     <div className=\"flex-grow-1\">\r\n//       <p className=\"user-name\">{userName}</p>\r\n//       <p>{text}</p>\r\n//       <button className=\"btn like-button\" onClick={handleClick}>\r\n//         <span className=\"material-icons\" style={{ color: heartColor }}>favorite_border</span>\r\n//       </button>\r\n//     </div>\r\n//   </div>\r\n// )\r\n// }\r\n\r\n// //Post Lecture, add the Channel navigation (elevate state, etc)\r\n\r\n// import React, {useState} from 'react';\r\n\r\n// export function ChatPane(props) {\r\n// // const [chatMessages, setChatMessages] = useState(CHAT_HISTORY);\r\n//   const currentChannel = props.currentChannel;\r\n\r\n//   //only show current channel messages\r\n//   const channelMessages = props.chatMessages.filter((msgObj) => {\r\n//     return msgObj.channel === currentChannel;\r\n//   })\r\n\r\n//   const messageItemArray = channelMessages.map((messageObj) => {\r\n//     const element = (\r\n//       <MessageItem\r\n//         messageData={messageObj}\r\n//         key={messageObj.timestamp}\r\n//       />\r\n//     )\r\n//     return element;\r\n//   })\r\n\r\n// const [count, setCount] = useState(0);\r\n\r\n// console.log('calling chatpane')\r\n\r\n// const handleClick = (event) => {\r\n//   console.log(\"you clicked me!\");\r\n//     setCount(count+1);\r\n//     console.log(count);\r\n//     // addMessage(\"Click\");\r\n// }\r\n\r\n\r\n// if (channelMessages.length === 0) {\r\n//   return <p>No Messages Yet</p>\r\n// }\r\n\r\n// return (\r\n//   <div className=\"scrollable-pane\">\r\n//     <div className=\"pt-2 my-2\">\r\n//       {/* testing button */}\r\n//       <button className=\"btn btn-outline-primary mb-3\" onClick={handleClick}>\r\n//         Click me: {count}\r\n//       </button>\r\n//       <hr />\r\n\r\n//       {messageItemArray}\r\n//     </div>\r\n//   </div>\r\n// )\r\n\r\n// }\r\n\r\n// function MessageItem(props) {\r\n// const { userName, userImg, text } = props.messageData;\r\n\r\n// const [isLiked, setIsLiked ] = useState(false);\r\n\r\n// const handleClick = (event) => {\r\n//   setIsLiked(!isLiked);\r\n//   console.log(\"you liked \" + userName + \"'s post!\");\r\n// }\r\n\r\n// let heartColor = 'grey';\r\n// if (isLiked){\r\n//   heartColor = 'red';\r\n// }\r\n\r\n// return (\r\n//   <div className=\"message d-flex mb-3\">\r\n//     <div className=\"me-2\">\r\n//       <img src={userImg} alt={userName + \"'s avatar\"} />\r\n//     </div>\r\n//     <div className=\"flex-grow-1\">\r\n//       <p className=\"user-name\">{userName}</p>\r\n//       <p>{text}</p>\r\n//       <button className=\"btn like-button\" onClick={handleClick}>\r\n//         <span className=\"material-icons\" style={{ color: heartColor }}>favorite_border</span>\r\n//       </button>\r\n//     </div>\r\n//   </div>\r\n// )\r\n// }"],"mappings":";;;;AAAA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEE;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,YAAY,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,OAAO,SAASC,QAAQA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAE9B;EACA;EACA;EACA;;EAEA;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAGrC,MAAMS,cAAc,GAAGJ,KAAK,CAACI,cAAc;EAG3C,MAAMC,WAAW,GAAIC,KAAK,IAAK;IAC7BH,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;IACnBK,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEN,KAAK,CAAC;EACvC,CAAC;;EAED;EACA,MAAMO,eAAe,GAAGb,YAAY,CAACc,MA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}